// Mocks generated by Mockito 5.4.0 from annotations
// in peerpal/test/activity/domain/usecase/has_ios_notification_permission_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:peerpal/app/domain/notification/notification_service.dart'
    as _i2;
import 'package:timezone/timezone.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i2.NotificationService {
  @override
  _i3.Future<void> unregisterDeviceToken() => (super.noSuchMethod(
        Invocation.method(
          #unregisterDeviceToken,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> registerDeviceToken() => (super.noSuchMethod(
        Invocation.method(
          #registerDeviceToken,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> startRemoteNotificationBackgroundHandler(
    dynamic firebaseMessagingBackgroundHandler,
    dynamic firebaseMessagingForegroundHandler,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startRemoteNotificationBackgroundHandler,
          [
            firebaseMessagingBackgroundHandler,
            firebaseMessagingForegroundHandler,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> stopRemoteNotificationBackgroundHandler() =>
      (super.noSuchMethod(
        Invocation.method(
          #stopRemoteNotificationBackgroundHandler,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<int> scheduleNotification(
    String? title,
    String? body,
    _i4.TZDateTime? scheduledDateTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [
            title,
            body,
            scheduledDateTime,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> showNotification(
    String? title,
    String? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #showNotification,
          [
            title,
            body,
          ],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> scheduleWeeklyNotification() => (super.noSuchMethod(
        Invocation.method(
          #scheduleWeeklyNotification,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<String> printPendingNotifications() => (super.noSuchMethod(
        Invocation.method(
          #printPendingNotifications,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> cancelNotification(int? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelNotification,
          [notificationId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> setWeeklyReminderScheduled(bool? isScheduled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWeeklyReminderScheduled,
          [isScheduled],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> scheduleDailyNotification() => (super.noSuchMethod(
        Invocation.method(
          #scheduleDailyNotification,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<bool> hasAskedForPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasAskedForPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
