// Mocks generated by Mockito 5.4.0 from annotations
// in peerpal/test/activity/domain/usecase/update_joined_activities_reminders_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:peerpal/activity/domain/models/activity.dart' as _i4;
import 'package:peerpal/activity/domain/repository/activity_reminder_repository.dart'
    as _i2;
import 'package:peerpal/activity/domain/usecase/calculate_upcoming_reminder_dates_usecase.dart'
    as _i6;
import 'package:peerpal/activity/domain/usecase/has_ios_notification_permission_usecase.dart'
    as _i7;
import 'package:timezone/timezone.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ActivityReminderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityReminderRepository extends _i1.Mock
    implements _i2.ActivityReminderRepository {
  MockActivityReminderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<String>?> getJoinedActivityIdsWithReminders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getJoinedActivityIdsWithReminders,
          [],
        ),
        returnValue: _i3.Future<List<String>?>.value(),
      ) as _i3.Future<List<String>?>);

  @override
  _i3.Future<void> setJoinedActivityIdsWithReminders(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #setJoinedActivityIdsWithReminders,
          [ids],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<String>?> getCreatedActivityIdsWithReminders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCreatedActivityIdsWithReminders,
          [],
        ),
        returnValue: _i3.Future<List<String>?>.value(),
      ) as _i3.Future<List<String>?>);

  @override
  _i3.Future<void> setCreatedActivityIdsWithReminders(List<String>? ids) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCreatedActivityIdsWithReminders,
          [ids],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelActivityReminders(String? activityId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelActivityReminders,
          [activityId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setActivityReminder(
    _i4.Activity? activity,
    _i5.TZDateTime? reminderDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setActivityReminder,
          [
            activity,
            reminderDate,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [CalculateUpcomingReminderDatesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculateUpcomingReminderDatesUseCase extends _i1.Mock
    implements _i6.CalculateUpcomingReminderDatesUseCase {
  MockCalculateUpcomingReminderDatesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i5.TZDateTime>> call(_i4.Activity? activity) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [activity],
        ),
        returnValue: _i3.Future<List<_i5.TZDateTime>>.value(<_i5.TZDateTime>[]),
      ) as _i3.Future<List<_i5.TZDateTime>>);
}

/// A class which mocks [IsIOSWithoutNotificationPermissionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsIOSWithoutNotificationPermissionUseCase extends _i1.Mock
    implements _i7.IsIOSWithoutNotificationPermissionUseCase {
  MockIsIOSWithoutNotificationPermissionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
